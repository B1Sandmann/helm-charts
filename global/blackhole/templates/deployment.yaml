kind: Deployment
apiVersion: extensions/v1beta1

metadata:
  name: blackhole

spec:
  revisionHistoryLimit: 3
  replicas: {{ .Values.replica_count }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 2
  template:
    metadata:
      labels:
        name: blackhole
    spec:
      # The preStop hook below sleeps 30 seconds, extend the gracePeriod accordingly
      terminationGracePeriodSeconds: 60

      initContainers:
        # wait for database
        - name: wait-for-database
          image: alpine
          command: ["sh", "-c", "for i in $(seq 1 300); do nc -zvw1 blackhole-postgresql 5432 && exit 0 || sleep 3; done; exit 1"]

        # create, migrate and seed databse
        - name: setup-database
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{.Values.image.pullPolicy}}
          volumeMounts:
            - name: clients
              mountPath: '/home/app/api/config/defaultClients'
              readOnly: true
          command: ["yarn", "setupdb"]
          env:
            - name: PGHOST
              value: {{ tVemplate "postgresql.fullname" . }}
            - name: PGPASSWORD
              valueFrom: { secretKeyRef:    { name: {{ template "postgresql.fullname" . }}, key: postgres-password } }

      containers:
        - name: blackhole
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{.Values.image.pullPolicy}}
          ports:
            - name: http
              containerPort: 80
          env:
            - name: REGION
              value: {{ .Values.region }}
            - name: PGHOST  
              value: {{ template "postgresql.fullname" . }}
            - name: PGPASSWORD
              valueFrom: { secretKeyRef:    { name: {{ template "postgresql.fullname" . }}, key: postgres-password } }
          livenessProbe:
            httpGet:
              path: /system/liveliness
              port: 80
            timeoutSeconds: 10
            periodSeconds: 60
            initialDelaySeconds: 60
          readinessProbe:
            httpGet:
              path: /system/readiness
              port: 80
            timeoutSeconds: 5
            periodSeconds: 5
          lifecycle:
            preStop:
              exec:
                #Give the ingress some time to reload its config
                command: ["/bin/sh","-c","sleep 30"]

      volumes:   
        - name: clients
          secret:
            secretName: clients
