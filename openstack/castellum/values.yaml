global:
  registry: DEFINED_IN_VALUES_FILE

castellum:
  image_tag: latest
  image_pull_policy: Always

  service_user:
    password: DEFINED_IN_VALUES_FILE

  # Set to non-empty values to enable audit logging to Hermes.
  rabbitmq:
    uri: ""
    queue_name: ""

  # # Whether to apply resource requests/limits to containers.
  # resources:
  #   enabled: false

# Deploy Castellum Prometheus alerts.
alerts:
  enabled: true
  # Name of the Prometheus to which the alerts should be assigned to.
  prometheus: openstack

pgmetrics:
  db_name: castellum

  customMetrics:
    castellum_asset_count:
      query: >
        SELECT r.asset_type AS asset, COUNT(a.id) AS gauge
          FROM resources r
          LEFT OUTER JOIN assets a ON a.resource_id = r.id
         GROUP BY r.asset_type
      metrics:
        - asset:
            usage: "LABEL"
            description: "Asset type"
        - gauge:
            usage: "GAUGE"
            description: "Total number of assets that are managed by Castellum"
    castellum_resource_count:
      query: >
        SELECT asset_type AS asset, COUNT(id) AS gauge
          FROM resources
         GROUP BY asset_type
      metrics:
        - asset:
            usage: "LABEL"
            description: "Asset type"
        - gauge:
            usage: "GAUGE"
            description: "Total number of resources where autoscaling is enabled"
    castellum_min_greenlit_at:
      query: >
        SELECT r.scope_uuid AS project_id, r.asset_type AS asset, EXTRACT(epoch FROM MIN(o.greenlit_at)) AS gauge
          FROM resources r
          JOIN assets a ON a.resource_id = r.id
          JOIN pending_operations o ON o.asset_id = a.id
         WHERE o.greenlit_at IS NOT NULL
         GROUP BY r.scope_uuid, r.asset_type
      metrics:
        - project_id:
            usage: "LABEL"
            description: "UUID of project"
        - asset:
            usage: "LABEL"
            description: "Asset type"
        - gauge:
            usage: "GAUGE"
            description: "Lowest greenlit_at timestamp of any pending operation in this project resource"
    castellum_resource:
      query: >
        SELECT asset_type AS asset, MIN(checked_at) AS min_checked_at
          FROM resources
         GROUP BY asset_type
      metrics:
        - asset:
            usage: "LABEL"
            description: "Asset type"
        - min_checked_at:
            usage: "GAUGE"
            description: "Lowest checked_at timestamp of any project resource with this asset type"
    castellum_asset:
      query: >
        SELECT r.asset_type AS asset, MIN(a.checked_at) AS min_checked_at
          FROM resources r
          JOIN assets a ON a.resource_id = r.id
          GROUP BY r.asset_type
      metrics:
        - asset:
            usage: "LABEL"
            description: "Asset type"
        - min_checked_at:
            usage: "GAUGE"
            description: "Lowest checked_at timestamp of any asset with this type"

    castellum_resource_scrape_errors:
      query: >
        SELECT COUNT(id) as gauge
          FROM resources
         WHERE scrape_error_message != ''
      metrics:
        - gauge:
            usage: "GAUGE"
            description: "Total number of resources that failed their last scrape"

    castellum_existing_asset_scrape_errors:
      query: >
        SELECT COUNT(id) as gauge
          FROM assets
         WHERE scrape_error_message != '' AND scraped_at IS NOT NULL
      metrics:
        - gauge:
            usage: "GAUGE"
            description: "Total number of assets that failed their last scrape (only counting those assets that had at least one successful scrape ever)"

    castellum_fresh_asset_scrape_errors:
      query: >
        SELECT COUNT(id) as gauge
          FROM assets
         WHERE scrape_error_message != '' AND scraped_at IS NULL
      metrics:
        - gauge:
            usage: "GAUGE"
            description: "Total number of assets that failed their last scrape (only counting those assets that never had a successful scrape)"

    castellum_asset_resize_errors:
      query: >
        WITH latest_finished_operations AS (
          SELECT DISTINCT ON (asset_id) o.* FROM finished_operations o
            JOIN assets a ON a.id = o.asset_id
          ORDER BY o.asset_id, o.finished_at DESC
        )
        SELECT COUNT(asset_id) as gauge
          FROM latest_finished_operations
         WHERE outcome = 'errored'
      metrics:
        - gauge:
            usage: "GAUGE"
            description: "Total number of assets that failed their last resize"
