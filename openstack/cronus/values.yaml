replicaCount: 1
cronus:
  enabled: true
  cacheSize: 256
  http: 5000
  smtp: 1025
  debug: true
  host: cronus-host
  tls: tls-secret
  image:
    name: cronus-repository
    pullPolicy: IfNotPresent
    tag: latest
    imagePullSecrets: []
  statefulSet:
    enabled: true
    podManagementPolicy: OrderedReady
    annotations: {}
    labels: {}
    headless:
      annotations: {}
      labels: {}
      servicePort: 80
  updateStrategy: RollingUpdate
  replicas: 1
nebula:
  enabled: true
  cacheSize: 512
  http: 1080
  debug: true
  host: nebula-host
  image:
    name: nebula-repository
    pullPolicy: IfNotPresent
    tag: latest
    imagePullSecrets: []
  statefulSet:
    enabled: true
    podManagementPolicy: OrderedReady
    annotations: {}
    labels: {}
    headless:
      annotations: {}
      labels: {}
      servicePort: 80
  updateStrategy: RollingUpdate
  replicas: 1


config:
  ## keystone optional authentication methods, add in @SECRETS the relevant method
  keystone:
    # authUrl: https://identity
    # region: eu-de-2
    # endpointType: public
    # applicationCredentialID: application-credential-id
    # applicationCredentialSecret: application-credential-secret
    # applicationCredentialName: application-credential-name 
    # projectID: project-id 
    projectName: master
    projectDomainName: ccadmin
    # projectDomainID: project-domain-id 
    userDomainName: Default
    # domainName: domain-name
    # domainID: domain-id 
    username: cronus
    # password: # a password must be defined in ".Values.global.cronus_service_password"
    # userID: user-id
  group: service-group
  jiraUsername: jira-username
  jiraPassword: jira-password
  serviceUsername: service-username
  servicePassword: service-password
  awsAccess: aws-access
  awsSecret: aws-secret
  technicalUsername: aws-username
  awsPolicy: aws-policy
  forwardUserAgent: false
  billingCacheTTL: 24h
  technicalResponsible: technical-responsible@example
  accountStatusTimeout: 5m
  accountStatusPollDelay: 10s
  verifyEmailDomain: example.com
  verifyEmailSecret: domainkey
  allowedServices:
    email: email-region

service:
  type: ClusterIP

# nginx values
ingress-nginx:
  tcp:
    465: ""
  controller:
    containerPort:
      http: 80
      https: 443
    service:
      annotations:
        disco: "true"
        disco/record: my-ingress.region.cloud.com.
      ports:
        http: 80
        https: 443
      targetPorts:
        http: http
        https: https
      nodePorts:
        http: ""
        https: ""
        465: ""
    ingressClass: cronus-nginx
    admissionWebhooks:
      enabled: false
    customTemplate:
      configMapName: cronus-nginx-template
      configMapKey: nginx.tmpl
