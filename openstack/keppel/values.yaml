keppel:
  image_tag: DEFINED_BY_PIPELINE

  slim: false # set to true for deployments to the small QA regions

  peer_hostnames: []

  service_password: DEFINED_IN_VALUES_FILE

  # name of Keppel account reserved for keppel-health-monitor
  healthcheck_account: healthcheck

  issuer_key.pem: DEFINED_IN_VALUES_FILE

  # Set to non-empty values to enable audit logging to Hermes.
  rabbitmq:
    uri: ""
    queue_name: ""

# Dynomite (the interregional distributed Redis cluster) is used for tracking
# account name claims, using Keppel's "redis" federation driver.
dynomite:
  host:     DEFINED_IN_VALUES_FILE
  password: DEFINED_IN_VALUES_FILE
  database: 0
  prefix:   keppel # prepended to all keys in Redis, to disambiguate clusters (e.g. QA vs. Prod)

# Redis is used for caching user's Keystone tokens and for tracking the
# consumption of rate limits. Both usecases are ephemeral, so we don't need
# persistence.
redis:
  persistence:
    enabled: false

  redisPassword: DEFINED_IN_VALUES_FILE

  # evict unused keys automatically
  config:
    maxmemory: 1gb
    maxmemory-policy: allkeys-lru
    maxmemory-samples: 5

pgmetrics:
  db_name: keppel

  customMetrics:
    keppel_accounts:
      query: 'SELECT COUNT(*) AS count, COALESCE(EXTRACT(epoch FROM MIN(blobs_sweeped_at)), 0) AS min_blobs_sweeped_at, COALESCE(EXTRACT(epoch FROM MIN(storage_sweeped_at)), 0) AS min_storage_sweeped_at, COALESCE(EXTRACT(epoch FROM MIN(announced_to_federation_at)), 0) AS min_announced_to_federation_at FROM accounts'
      metrics:
        - count:
            usage: "GAUGE"
            description: "Total number of accounts managed by Keppel"
        - min_blobs_sweeped_at:
            usage: "GAUGE"
            description: "UNIX timestamp of oldest blob sweep, or 0 if no accounts have ever been sweeped"
        - min_storage_sweeped_at:
            usage: "GAUGE"
            description: "UNIX timestamp of oldest storage sweep, or 0 if no accounts have ever been sweeped"
        - min_announced_to_federation_at:
            usage: "GAUGE"
            description: "UNIX timestamp of oldest federation announcement, or 0 if no accounts have ever been announced to federation"
    keppel_blobs:
      query: "SELECT COUNT(*) AS count, COALESCE(EXTRACT(epoch FROM MIN(marked_for_deletion_at)), 0) AS min_marked_for_deletion_at, EXTRACT(epoch FROM MIN(validated_at)) AS min_validated_at, SUM(CASE WHEN validation_error_message = '' THEN 0 ELSE 1 END) AS validation_errors FROM blobs"
      metrics:
        - count:
            usage: "GAUGE"
            description: "Total number of blobs stored in Keppel"
        - min_marked_for_deletion_at:
            usage: "GAUGE"
            description: "UNIX timestamp when oldest not-yet-deleted blob was marked for deletion, or 0 if no blobs are currently marked for deletion"
        - min_validated_at:
            usage: "GAUGE"
            description: "UNIX timestamp of oldest blob validation"
        - validation_errors:
            usage: "GAUGE"
            description: "Number of blobs stored in Keppel that failed their last validation"
    keppel_blob_mounts:
      query: 'SELECT COALESCE(EXTRACT(epoch FROM MIN(marked_for_deletion_at)), 0) AS min_marked_for_deletion_at FROM blob_mounts'
      metrics:
        - min_marked_for_deletion_at:
            usage: "GAUGE"
            description: "UNIX timestamp when oldest not-yet-deleted blob mount was marked for deletion, or 0 if no blob mounts are currently marked for deletion"
    keppel_repos:
      query: 'SELECT COUNT(*) AS count, COALESCE(EXTRACT(epoch FROM MIN(blob_mounts_sweeped_at)), 0) AS min_blob_mounts_sweeped_at FROM repos'
      metrics:
        - count:
            usage: "GAUGE"
            description: "Total number of repositories stored in Keppel"
        - min_blob_mounts_sweeped_at:
            usage: "GAUGE"
            description: "UNIX timestamp of oldest blob-mount sweep, or 0 if no repos have ever been sweeped"
    keppel_replicated_repos:
      query: "SELECT COUNT(r.id) AS count, COALESCE(EXTRACT(epoch FROM MIN(r.manifests_synced_at)), 0) AS min_manifests_synced_at FROM repos r JOIN accounts a ON r.account_name = a.name WHERE a.upstream_peer_hostname != ''"
      metrics:
        - count:
            usage: "GAUGE"
            description: "Total number of repositories in replica accounts stored in Keppel"
        - min_manifests_synced_at:
            usage: "GAUGE"
            description: "UNIX timestamp of oldest manifest sync, or 0 if no replica repos have ever been synced"
    keppel_manifests:
      query: "SELECT COUNT(*) AS count, EXTRACT(epoch FROM MIN(validated_at)) AS min_validated_at, SUM(CASE WHEN validation_error_message = '' THEN 0 ELSE 1 END) AS validation_errors FROM manifests"
      metrics:
        - count:
            usage: "GAUGE"
            description: "Total number of manifests stored in Keppel"
        - min_validated_at:
            usage: "GAUGE"
            description: "UNIX timestamp of oldest manifest validation"
        - validation_errors:
            usage: "GAUGE"
            description: "Number of manifests stored in Keppel that failed their last validation"
    keppel_unknown_blobs:
      query: 'SELECT COALESCE(EXTRACT(epoch FROM MIN(marked_for_deletion_at)), 0) AS min_marked_for_deletion_at FROM unknown_blobs'
      metrics:
        - min_marked_for_deletion_at:
            usage: "GAUGE"
            description: "UNIX timestamp when oldest not-yet-deleted unknown manifest was marked for deletion, or 0 if there are no unknown manifests at the moment"
    keppel_unknown_manifests:
      query: 'SELECT COALESCE(EXTRACT(epoch FROM MIN(marked_for_deletion_at)), 0) AS min_marked_for_deletion_at FROM unknown_manifests'
      metrics:
        - min_marked_for_deletion_at:
            usage: "GAUGE"
            description: "UNIX timestamp when oldest not-yet-deleted unknown manifest was marked for deletion, or 0 if there are no unknown manifests at the moment"
    keppel_tags:
      query: 'SELECT COUNT(*) AS count FROM tags'
      metrics:
        - count:
            usage: "GAUGE"
            description: "Total number of tags stored in Keppel"
    keppel_peers:
      query: >
        SELECT hostname, COALESCE(EXTRACT(epoch FROM last_peered_at), 0) AS last_peered_at FROM peers
      metrics:
        - hostname:
            usage: "LABEL"
            description: "Peer hostname"
        - last_peered_at:
            usage: "GAUGE"
            description: "UNIX timestamp of when we last issued a password for this peer (should happen every 10 minutes)"
    keppel_blob_replication:
      query: >
        SELECT COALESCE(EXTRACT(epoch FROM MIN(since)), 0) AS min_started_at FROM pending_blobs
      metrics:
        - min_started_at:
            usage: "GAUGE"
            description: "UNIX timestamp when oldest still-running blob replication was started (or 0 when no replication is in progress)"
    keppel_upload:
      query: >
        SELECT COALESCE(EXTRACT(epoch FROM MIN(updated_at)), 0) AS min_updated_at FROM uploads
      metrics:
        - min_updated_at:
            usage: "GAUGE"
            description: "UNIX timestamp when oldest still-active upload was started (or 0 when no upload is in progress)"
