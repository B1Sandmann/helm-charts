{
	"properties": {},
	"iconsrc": "",
	"description": "",
	"processes": {
		"s3consumer1": {
			"component": "com.sap.storage.s3.consumer",
			"metadata": {
				"label": "Swift-S3 Consumer",
				"x": 16,
				"y": 12,
				"height": 80,
				"width": 120,
				"subengines": [
					"main"
				],
				"config": {
					"aws_access_key_id": {{ $content.pipelines.openstackdb_import.key_id }},
					"aws_secret_access_key": {{ $content.pipelines.openstackdb_import.access_key }},
					"region": "staging",
					"endpointURL": "https://objectstore-3.staging.cloud.sap:443",
					"bucket": "/datalake",
					"path": "/openstackdb_exports/cinder.volume_attachment.csv",
					"recursive": false,
					"pollPeriodInMs": 1000
				}
			},
			"securitycontexts": [
				""
			]
		},
		"wiretap1": {
			"component": "com.sap.util.wiretap",
			"metadata": {
				"label": "Wiretap",
				"x": 367.9999990463257,
				"y": 12,
				"height": 80,
				"width": 120,
				"ui": "dynpath",
				"config": {
					"spoolSize": 10
				}
			}
		},
		"voraingestor1": {
			"component": "com.sap.vora.ingestor",
			"metadata": {
				"label": "Vora Ingestor",
				"x": 871.9999990463257,
				"y": 12,
				"height": 80,
				"width": 120,
				"subengines": [
					"main"
				],
				"config": {
					"dsn": "v2://vora-tx-coordinator:10002/?binary=true",
					"ingestionMode": "UPSERT",
					"user": "default\\ingestor",
					"password": "{{ $.vora.ingestor.password }}",
					"databaseSchema": "OPENSTACK"
				}
			}
		},
		"golangoperator1": {
			"component": "com.sap.system.golangmengine2",
			"metadata": {
				"label": "Golang Operator",
				"x": 184,
				"y": 12,
				"height": 80,
				"width": 120,
				"extensible": true,
				"subengines": [
					"main"
				],
				"config": {
					"script": "package main\n\nimport (\n    \"bufio\"\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"regexp\"\n    \"strings\"\n)\n\nvar Output func(interface{})\nvar re = regexp.MustCompile(\"(.*)\\\\.(.*)(-.*)?\\\\.csv\")\n\nfunc main() {\n  // no special setup needed    \n}\n\nfunc schemaFromCSV(database string, table string, csv []byte) string {\n    r := bufio.NewReaderSize(bytes.NewReader(csv), 1024)\n    line, _, _ := r.ReadLine()\n    columns := strings.Split(string(line), \",\")\n\n    fields := make([]map[string]interface{}, len(columns))\n    for i := range columns {\n        fields[i] = map[string]interface{}{\"name\": columns[i], \"type\": \"string\"}\n        if columns[i] != \"id\" {\n            fields[i][\"type\"] = []string{\"null\", \"string\"}\n        }\n    }\n    schema := map[string]interface{}{\n        \"namespace\": database,\n        \"type\": \"record\",\n        \"name\": table,\n        \"fields\": fields,\n    }\n    \n    b, err := json.Marshal(schema)\n\tif err != nil {\n\t\tfmt.Println(\"error:\", err)\n\t    return \"\"\n\t}\n\treturn string(b)\n}\n\n// here implement the function with the input port name, so data coming from this input will call this function\nfunc Input(val interface{}){\n\tmessage := val.(map[string]interface{})\n\t\n\tfmt.Println(\"ccloud input arrived\")\n\t\n\t// read contents\n\tbody := message[\"Body\"].([]byte)\n\tattr := message[\"Attributes\"].(map[string]interface{})\n\tnewAttr := make(map[string]interface{}, len(attr)+2)\n\tfor key := range attr {\n\t\tnewAttr[key] = attr[key]\n\t}\n\n\tfmt.Println(\"ccloud: contents read\")\n\t\n\t// enhance header\n    filename_seg := re.FindStringSubmatch(attr[\"storage.filename\"].(string))\n\tif len(filename_seg) < 3 {\n\t    fmt.Println(\"ccloud: ERROR filename cannot be parsed\")\n\t    return\n\t}\n\t\n\tdatabase := filename_seg[1]\n\ttable := filename_seg[2]\n    newAttr[\"vora.record.definition\"] = map[string]interface{}{\"recName\": table}\n    newAttr[\"avro.schema\"] = schemaFromCSV(database, table, body)\n\n    fmt.Println(\"ccloud: output header \", newAttr)\n\n    // build transformed message\n\tnewMessage := make(map[string]interface{}, 3)\n\tnewMessage[\"Attributes\"] = newAttr\n\tnewMessage[\"Encoding\"] = message[\"Encoding\"]\n\tnewMessage[\"Body\"] = body\n\n    // output\n    fmt.Println(\"ccloud output body: \", string(body))\n\tOutput(newMessage)\n}"
				},
				"additionalinports": [
					{
						"name": "Input",
						"type": "message"
					}
				],
				"additionaloutports": [
					{
						"name": "Output",
						"type": "message"
					}
				]
			},
			"securitycontexts": [
				""
			]
		},
		"avropreingestor1": {
			"component": "com.sap.vora.preingestor",
			"metadata": {
				"label": "Avro PreIngestor",
				"x": 535.9999990463257,
				"y": 12,
				"height": 80,
				"width": 120,
				"config": {
					"format": "csv",
					"csvHeaderIncluded": true
				}
			}
		},
		"wiretap2": {
			"component": "com.sap.util.wiretap",
			"metadata": {
				"label": "Wiretap",
				"x": 711.9999990463257,
				"y": 12,
				"height": 80,
				"width": 120,
				"ui": "dynpath",
				"config": {
					"spoolSize": 10
				}
			}
		},
		"graphterminator1": {
			"component": "com.sap.util.graphTerminator",
			"metadata": {
				"label": "Graph Terminator",
				"x": 1027,
				"y": 3,
				"height": 80,
				"width": 120,
				"config": {}
			}
		}
	},
	"groups": [],
	"connections": [
		{
			"metadata": {
				"points": "140,61 180,61"
			},
			"src": {
				"port": "outFile",
				"process": "s3consumer1"
			},
			"tgt": {
				"port": "Input",
				"process": "golangoperator1"
			}
		},
		{
			"metadata": {
				"points": "308,61 335.99999952316284,61 335.99999952316284,52 363.9999990463257,52"
			},
			"src": {
				"port": "Output",
				"process": "golangoperator1"
			},
			"tgt": {
				"port": "in",
				"process": "wiretap1"
			}
		},
		{
			"metadata": {
				"points": "491.9999990463257,52 531.9999990463257,52"
			},
			"src": {
				"port": "out",
				"process": "wiretap1"
			},
			"tgt": {
				"port": "in",
				"process": "avropreingestor1"
			}
		},
		{
			"metadata": {
				"points": "659.9999990463257,52 707.9999990463257,52"
			},
			"src": {
				"port": "out",
				"process": "avropreingestor1"
			},
			"tgt": {
				"port": "in",
				"process": "wiretap2"
			}
		},
		{
			"metadata": {
				"points": "835.9999990463257,52 867.9999990463257,52"
			},
			"src": {
				"port": "out",
				"process": "wiretap2"
			},
			"tgt": {
				"port": "in",
				"process": "voraingestor1"
			}
		},
		{
			"metadata": {
				"points": "995.9999990463257,52 1009.5,52 1009.5,43 1023,43"
			},
			"src": {
				"port": "out",
				"process": "voraingestor1"
			},
			"tgt": {
				"port": "stop",
				"process": "graphterminator1"
			}
		}
	],
	"inports": {},
	"outports": {}
}
