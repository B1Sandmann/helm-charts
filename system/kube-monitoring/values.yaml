global:
  region: DEFINED-AS-VALUE
  domain: DEFINED-AS-VALUE

  clusterType: controlplane

  ipmi_service_discovery:
    enabled: false
    configmap_name: ipmi-sd
    netbox:
      enabled: false
    # api_token:

  ipmi_exporter:
    enabled: false
    netbox:
      enabled: false

  arista_exporter:
    enabled: false
    configmap_name: arista-sd

  # Prometheus via operator.
  prometheus_operated:
    # The Prometheus collector is only used in the baremetal controlplane to aggregate cpu metrics and
    # might be unnecessary in other environments.
    # If the collector is disabled a `frontend` Prometheus is deployed.
    collector:
      enabled: true

# Metric whitelist.
allowedMetrics:
  # Full list of cAdvisor metrics: https://github.com/google/cadvisor/blob/master/docs/storage/prometheus.md .
  cAdvisor:
    - container_cpu_cfs_periods_total
    - container_cpu_cfs_throttled_seconds_total
    - container_cpu_cfs_throttled_periods_total
    - container_cpu_usage_seconds_total
    - container_cpu_user_seconds_total
    - container_cpu_system_seconds_total
    - container_fs_inodes_total
    - container_fs_limit_bytes
    - container_fs_usage_bytes
    - container_last_seen
    - container_memory_usage_bytes
    - container_memory_working_set_bytes
    - container_network_receive_bytes_total
    - container_network_transmit_bytes_total
    - container_start_time_seconds

  # Full list of kubelet metrics: https://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/metrics/metrics.go#L33 .
  kubelet:
    - kubelet_pod_start_latency_microseconds
    - kubelet_running_pod_count
    - process_max_fds
    - process_open_fds

  # Full list of APIserver metrics: https://github.com/kubernetes/apiserver/blob/master/pkg/endpoints/metrics/metrics.go .
  kubeAPIServer:
    - apiserver_request_count
    - apiserver_request_latencies_bucket
    - etcd_object_counts
    - process_max_fds
    - process_open_fds

# Values for operated Prometheus collector.
# Only used if global.prometheus_operated.enabled: true.
prometheus-collector-operated:
  name: collector-kubernetes

  retentionTime: 1h

  additionalScrapeConfigs:
    name: k8s-collector-additional-scrape-config
    key: scrape-config.yaml

  ingress:
    enabled: true
    host: prometheus-collector-kubernetes

  # Store in memory.
  persistence:
    enabled: false

  serviceAccount:
    create: false
    name: default

  # Discover targets with `prometheus.io/targets=kubernetes` annotation as well.
  serviceDiscoveries:
    additionalTargets:
      - kubernetes

# Values for operated Prometheus frontend.
# Only used if global.prometheus_operated.enabled: true.
prometheus-frontend-operated:
  name: kubernetes

  retentionTime: 7d

  additionalScrapeConfigs:
    name: k8s-frontend-additional-scrape-config
    key: scrape-config.yaml

  ingress:
    enabled: true
    host: prometheus-kubernetes

  # Store in memory.
  persistence:
    enabled: true
    size: 300Gi

  serviceAccount:
    create: false
    name: default

  serviceDiscoveries:
    endpoints:
      enabled: false

  # Send alerts to these alertmanagers.
  alertmanagers:
    - alertmanager.eu-de-1.cloud.sap

# Deploy basic set of Prometheus alert and aggregation rules for monitoring Kubernetes.
prometheus-kubernetes-rules:
  prometheusName: kubernetes
  prometheusCollectorName: collector-kubernetes

prometheus-node-exporter:
  image:
    repository: prom/node-exporter
    tag: v0.17.0

  serviceAccount:
    create: false
    name: default

  rbac:
    create: false

  extraArgs:
    - --collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)
    - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|bpf|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tmpfs|tracefs)$$
    - --collector.processes
    - --path.rootfs=/rootfs
    # enabled by default. flag didn't make it to prom/node-exporter:v0.17.0 .
    # - --collector.systemd.enable-task-metrics

  extraHostVolumeMounts:
    - name: dbus
      hostPath: /var/run/dbus/system_bus_socket
      mountPath: /var/run/dbus/system_bus_socket
      readOnly: true
    - name: rootfs
      hostPath: /
      mountPath: /rootfs
      readOnly: true
      mountPropagation: HostToContainer

  resources:
    requests:
      memory: 100Mi
      cpu: 100m

kube-state-metrics:
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/port_1: "8081"
    prometheus.io/targets: "kubernetes,openstack"

  # This avoid double scraping of metrics caused by setting the `prometheus.io/scrape: "true"` annotation on the service.
  # We already have the annotations on the kube-state-metrics pod.
  prometheusScrape: false

  image:
    repository: sapcc/kube-state-metrics

  rbac:
    create: false
    serviceAccountName: default

  serviceAccount:
    create: false

  collectors:
    # not useful
    configmaps: false
    secrets: false
    # not available in k8s1.7
    cronjobs: false
    horizontalpodautoscalers: false

  resources:
    requests:
      memory: 150Mi
      cpu: 100m

fluent-bit:
  enabled: false

  image:
    fluent_bit:
      repository: fluent/fluent-bit
      tag: 1.0.4
    pullPolicy: IfNotPresent

  backend:
    es:
      tls_ca: ""
      # host:
      # http_user:
      # http_passwd:
      # logstash_prefix:

  # filter:
  # list of additional static values added to each log entry
  #  additionalValues:
  #  - key: some-key
  #    value: some-value

  podAnnotations:
    # manual versioning, raise if configmap changes
    versioning: "1"

  existingConfigMap: fluent-bit-config

  resources:
    limits:
      cpu: 500m
      memory: 200Mi
    requests:
      cpu: 100m
      memory: 100Mi

  rbac:
    create: true

  serviceAccount:
    create: true

# OpenStack namespace exporter.
# Disabled by default. Enabled via regional secrets.
ns-exporter:
  enabled: false

ping-exporter:
  enabled: false
  targets: []
